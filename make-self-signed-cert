#! /bin/sh
#
me="$(basename $0)"

usage () {
cat <<EOF
Usage: $me [options] HOSTNAME [HOSTNAME ...]

Generate a self-signed certificate for the given host.

The first HOSTNAME must be the primary host name (i.e., what the name
used for A and PTR records in DNS).  Additional host names (aliases)
can be specified on the command-line and will be included in the
certificate as "subject alternate names".  All HOSTNAMEs must be
fully-qualified DNS names.

Options:

  -f, --skip-dns-check
              Do not require that the primary host name can be
              resolved through DNS.  Use at your own risk.

  -h, --help  Print this help text.
EOF
}

## defaults

require_dns_check='yes'


## helper functions
die () {
  rc="$1"
  shift
  (echo -n "$me: ERROR: ";
     if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
   exit $rc
}

have_command () {
  type "$1" >/dev/null 2>/dev/null
}

require_command () {
  if ! have_command "$1"; then
        die 1 "Could not find required command '$1' in system PATH. Aborting."
  fi
}

require_fully_qualified_name () {
    # just check for the presence of a dot `.`
    case "$1" in
        *.*) return 0 ;;
        *)   return 1 ;;
    esac
}

require_name_in_dns () {
    # we use `getent hosts` instead of hosts
    # for two reasons:
    #   1) it's always available, whereas ISC `host` is not
    #   2) you can fool it using /etc/hosts which might come handy
    #      (on the other hand, this introduces new subtle opportunities
    #      for errors)
    getent hosts "$1" >/dev/null 2>/dev/null
}


## parse command-line

short_opts='h'
long_opts='help'

# test which `getopt` version is available:
# - GNU `getopt` will generate no output and exit with status 4
# - POSIX `getopt` will output `--` and exit with status 0
getopt -T > /dev/null
rc=$?
if [ "$rc" -eq 4 ]; then
    # GNU getopt
    args=$(getopt --name "$me" --shell sh -l "$long_opts" -o "$short_opts" -- "$@")
    if [ $? -ne 0 ]; then
        die 1 "Type '$me --help' to get usage information."
    fi
    # use 'eval' to remove getopt quoting
    eval set -- $args
else
    # old-style getopt, use compatibility syntax
    args=$(getopt "$short_opts" "$@")
    if [ $? -ne 0 ]; then
        die 1 "Type '$me --help' to get usage information."
    fi
    set -- $args
fi

while [ $# -gt 0 ]; do
    case "$1" in
        --skip-dns-check|--no-dns|-f)
            require_dns_check='no'
            ;;
        --help|-h)
            usage; exit 0
            ;;
        --)
            shift;
            break;
            ;;
    esac
    shift
done


## main

fqdn="$1"
if [ -z "$fqdn" ]; then
  die 1 "No HOSTNAME given. Please type '$me --help' for usage help."
fi
require_fully_qualified_name "$fqdn" \
    || die 2 "Host name '$fqdn' is not a fully-qualified name."
if [ "$require_dns_check" = 'yes' ] then
   require_name_in_dns "$fqdn" \
       || die 2 "Cannot resolve host name '$fqdn'.  It must be registered in the DNS database."
fi

# additional host names
shift
aliases="DNS:${fqdn}"
for alias in "$@"; do
    require_fully_qualified_name "$alias" \
        || die 2 "Host name '$alias' is not a fully-qualified name."
    aliases="${aliases}, DNS:${alias}"
done


require_command getent
require_command openssl


set -ex

# generate key (no passwd, no encryption)
openssl genrsa -out "${fqdn}.key.pem" 4096

# generate CSR
tmp=$(mktemp "${me}.XXXXXX.cnf") \
  || die 2 "Cannot create temporary file"
sed -re "s/FQDN *=.*/FQDN = $fqdn/" > "$tmp" <<__EOF__
# OpenSSL configuration file for creating a CSR for a server certificate
# Adapt at least the FQDN and ORGNAME lines, and then run
# openssl req -new -config myserver.cnf -keyout myserver.key -out myserver.csr
# on the command line.

# the fully qualified server (or service) name
FQDN = example.uzh.ch

# the name of your organization
# (see also https://www.switch.ch/pki/participants.html)
ORGNAME = Universitaet Zuerich

# subjectAltName entries: to add DNS aliases to the CSR, delete
# the '#' character in the ALTNAMES line, and change the subsequent
# 'DNS:' entries accordingly. Please note: all DNS names must
# resolve to the same IP address as the FQDN.
ALTNAMES = ${aliases}

# --- no modifications required below ---
[ req ]
default_bits = 2048
prompt = no
encrypt_key = no
distinguished_name = dn
req_extensions = req_ext

[ dn ]
C = CH
ST = Zuerich
L = Zuerich
O = \$ORGNAME
OU = S3IT
CN = \$FQDN

[ req_ext ]
subjectAltName = \$ALTNAMES
__EOF__
openssl req -new -config "$tmp" -key "${fqdn}.key.pem" -out "${fqdn}.csr.pem"

# sign it
openssl x509 -req -days 365 -in "${fqdn}.csr.pem" -signkey "${fqdn}.key.pem" -out "${fqdn}.crt.pem"

# show success
cat <<__EOF__

A self-signed X.509 certificate has been successuly generated
with the following parameters:
__EOF__

openssl x509 -subject -startdate -enddate -noout -in "${fqdn}.crt.pem"

cat <<__EOF__

The certificate files are as follows:

- PEM certificate file: '${fqdn}.crt.pem'
- PEM key file: '${fqdn}.key.pem'

__EOF__
