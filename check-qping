#! /bin/sh
#
PROG="$(basename $0)"

usage () {
cat <<EOF
Usage: $PROG [options] [HOST ...]

Check that the SGE execd is responsive using 'qping -info';
exit with nonzero status if this reports an error.

Any number of HOSTs can be given on the command-line: the exit status
will be the number of hosts that failed the 'qping' check.  When
called with no arguments, '$PROG' reads the host names from STDIN, so
you can for instance do::

    sge-list-nodes d | $PROG

No output is printed to STDOUT unless the '--verbose'
option is given.


Options:

  --help, -h  Print this help text.

  --verbose   Output 'qping -info' report.

EOF
}


## helper functions
die () {
  rc="$1"
  shift
  (echo -n "$PROG: ERROR: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
  exit $rc
}

warn () {
  (echo -n "$PROG: WARNING: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
}

have_command () {
  type "$1" >/dev/null 2>/dev/null
}

require_command () {
  if ! have_command "$1"; then
    die 1 "Could not find required command '$1' in system PATH. Aborting."
  fi
}

is_absolute_path () {
    expr match "$1" '/' >/dev/null 2>/dev/null
}


## parse command-line 

short_opts='hv'
long_opts='help,verbose'

if [ "x$(getopt -T)" != 'x--' ]; then
    # GNU getopt
    args=$(getopt --name "$PROG" --shell sh -l "$long_opts" -o "$short_opts" -- "$@")
    if [ $? -ne 0 ]; then
        die 1 "Type '$PROG --help' to get usage information."
    fi
    # use 'eval' to remove getopt quoting
    eval set -- $args
else
    # old-style getopt, use compatibility syntax
    args=$(getopt "$short_opts" "$@") 
    if [ $? -ne 0 ]; then
        die 1 "Type '$PROG --help' to get usage information."
    fi
    set -- $args
fi

while [ $# -gt 0 ]; do
    case "$1" in
        --verbose|-v) verbose='-v' ;;
        --help|-h) usage; exit 0 ;;
        --) shift; break ;;
    esac
    shift
done

## main

require_command qping
require_command mktemp
require_command egrep


# environment sanity checks
tmp=$(mktemp -q)
if [ -z "$tmp" ]; then
    # EX_OSERR
    die 71 "Cannot create temporary file."
fi
trap "rm '$tmp'" EXIT

if [ -z "$SGE_EXECD_PORT" ]; then
    # EX_SOFTWARE
    die 74 "Cannot read 'execd' port from environment variable 'SGE_EXECD_PORT'"
fi

# if no arguments, read them from STDIN
if [ $# -eq 0 ]; then
    set -- $(cat)
fi

failures=0
for host in "$@"; do
    # do the actual check
    qping -info "$host" "$SGE_EXECD_PORT" execd 1 \
        > "$tmp" 2>&1

    # FIXME: does this regex catch all error messages?
    msg=$(egrep "(can't find connection|got send timeout)" "$tmp")
    if [ -z "$msg" ]; then
        rc=0
        outcome='ok'
        msg=$(egrep '^info:' "$tmp" | cut -c27-)
    else
        rc=1
        outcome='FAIL'
    fi

    failures=$(expr $failures + $rc)

    if [ -n "$verbose" ]; then
        echo "${host}: ${outcome}: ${msg}"
    fi
done

exit $failures
