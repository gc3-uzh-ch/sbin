#! /usr/bin/env python
"""
Print the map from HDD slots (as seen on the chassis) to Linux device names.
Works only on Sun Fire X4500/X4540 systems.

**Note:** there is a lot of ad-hoc processing done here, and part
of it is guesswork based on the (few) examples I've had access to.
There is no warranty that the returned results will be correct;
USE AT YOUR WON RISK!
"""

from collections import defaultdict
import logging
import os
import subprocess
import sys
import xml.etree.ElementTree as et


try:
    from subprocess import check_output
except ImportError:
    # compatibility with Python < 2.7
    def check_output(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise subprocess.CalledProcessError(retcode, cmd, output=output)
        return output


## this was gotten from Table 7-6 of
## http://docs.oracle.com/cd/E19469-01/819-4363-12/hd_util_x4500.html
slot_to_ctl_and_diskno = {
    'x4500': {
        #SLOT  CONTROLLER DISK NO.

    # back row
        36: (3, 3),
        37: (3, 7),
        38: (2, 3),
        39: (2, 7),
        40: (5, 3),
        41: (5, 7),
        42: (4, 3),
        43: (4, 7),
        44: (1, 3),
        45: (1, 7),
        46: (0, 3),
        47: (0, 7),

    # 2nd row
        24: (3, 2),
        25: (3, 6),
        26: (2, 2),
        27: (2, 6),
        28: (5, 2),
        29: (5, 6),
        30: (4, 2),
        31: (4, 6),
        32: (1, 2),
        33: (1, 6),
        34: (0, 2),
        35: (0, 6),

    # third row
        12: (3, 1),
        13: (3, 5),
        14: (2, 1),
        15: (2, 5),
        16: (5, 1),
        17: (5, 5),
        18: (4, 1),
        19: (4, 5),
        20: (1, 1),
        21: (1, 5),
        22: (0, 1),
        23: (0, 5),

    # front row
        0:  (3, 0),
        1:  (3, 4),
        2:  (2, 0),
        3:  (2, 4),
        4:  (5, 0),
        5:  (5, 4),
        6:  (4, 0),
        7:  (4, 4),
        8:  (1, 0),
        9:  (1, 4),
        10: (0, 0),
        11: (0, 4),
    },

    'x4540': {
        #SLOT  CONTROLLER DISK NO.
        0 :    (0,   0),
        1 :    (0,   1),
        2 :    (0,   2),
        3 :    (0,   3),
        4 :    (0,   4),
        5 :    (0,   5),
        6 :    (0,   6),
        7 :    (0,   7),
        8 :    (1,   0),
        9 :    (1,   1),
        10:    (1,   2),
        11:    (1,   3),
        12:    (1,   4),
        13:    (1,   5),
        14:    (1,   6),
        15:    (1,   7),
        16:    (2,   0),
        17:    (2,   1),
        18:    (2,   2),
        19:    (2,   3),
        20:    (2,   4),
        21:    (2,   5),
        22:    (2,   6),
        23:    (2,   7),
        24:    (3,   0),
        25:    (3,   1),
        26:    (3,   2),
        27:    (3,   3),
        28:    (3,   4),
        29:    (3,   5),
        30:    (3,   6),
        31:    (3,   7),
        32:    (4,   0),
        33:    (4,   1),
        34:    (4,   2),
        35:    (4,   3),
        36:    (4,   4),
        37:    (4,   5),
        38:    (4,   6),
        39:    (4,   7),
        40:    (5,   0),
        41:    (5,   1),
        42:    (5,   2),
        43:    (5,   3),
        44:    (5,   4),
        45:    (5,   5),
        46:    (5,   6),
        47:    (5,   7),
    },
}


## map (controller, disk) to Linux device name

ctrl_and_disk_info = defaultdict(dict)

# if boot disk emulation is enabled in the BIOS, SCSI controller
# numbers are shifted upwards by 2 (X4540 running Ubuntu 14.04 on
# Linux 3.13 -- the Oracle manual cited above shows a very different
# behavior for Solaris)
have_emulated_disks = False

if os.path.exists('lshw.xml'):
    tree = et.parse('lshw.xml')
    data = tree.getroot()
else:
    lshw = ['lshw', '-xml', '-c', 'system', '-c', 'storage', '-c', 'disk']
    if not sys.stdout.isatty():
        lshw.append('-quiet')
    lshw_output = check_output(lshw, shell=False)
    data = et.fromstring(lshw_output)
assert data.tag == 'list'
data = data.find("./node[@class='system']")
assert data.attrib['class'] == 'system'

product = data.findtext('product')
if 'Sun Fire X4500' in product:
    model = 'x4500'
    logging.info("Sun Fire X4500 hardware detected")
elif 'Sun Fire X4540' in product:
    model = 'x4540'
    logging.info("Sun Fire X4540 hardware detected")
else:
    raise RuntimeError("Unknown hardware model: %s"
                       % (product,))

# enumerate controllers and disks
ctrl_nr = -1
for child in data.iter('node'):
    if child.get('id') != 'scsi' or child.get('class') != 'storage':
        continue
    ctrl_nr += 1
    # try to find out whether BIOS emulation of boot devices is on;
    # like many things in this script, this is very ad-hoc and matches
    # what I've seen on a single X4540 machine -- there is no guarantee
    # it will ever work on other HW configurations, etc.
    caps = child.find('capabilities')
    for capability in caps.iter('capability'):
        captext = capability.text
        if captext is not None and 'emulated' in captext.lower():
            have_emulated_disks = True
            logging.info("ILOM Virtual disks feature is on -- shifting controller numbers")
    # extract disk ID
    for grandchild in child.iter('node'):
        if grandchild.get('class') != 'disk':
            continue
        physid = grandchild.findtext('physid')
        try:
            disk_nr = int(physid)
        except ValueError:
            # physid is not an integer
            logging.error("Cannot parse disk physical ID '%s', ignoring this entry.", physid)
            continue
        devname = grandchild.findtext('logicalname')
        serial = grandchild.findtext('serial') or '[serial unknown]'
        ctrl_and_disk_info[ (ctrl_nr, disk_nr) ]['device'] = devname
        ctrl_and_disk_info[ (ctrl_nr, disk_nr) ]['serial'] = serial

if not ctrl_and_disk_info:
    # enumeration via `lshw` failed (happens on Ubuntu 14.04 "Trusty")
    # so try to read info from links in `/sys`, e.g.:
    #     root@storage3:~# ls /sys/class/block/*/device -l
    #     lrwxrwxrwx 1 root root 0 gen 20 12:07 /sys/class/block/sdaa/device -> ../../../5:0:1:0
    #     lrwxrwxrwx 1 root root 0 gen 20 12:06 /sys/class/block/sdab/device -> ../../../5:0:2:0
    #     lrwxrwxrwx 1 root root 0 gen 20 12:06 /sys/class/block/sdac/device -> ../../../5:0:3:0
    #     lrwxrwxrwx 1 root root 0 gen 20 12:07 /sys/class/block/sdad/device -> ../../../5:0:4:0
    #     lrwxrwxrwx 1 root root 0 gen 20 12:06 /sys/class/block/sda/device -> ../../../0:0:0:0
    #     ....
    #
    for entry in os.listdir('/sys/block'):
        devpath = os.path.join('/sys/block', entry, 'device')
        if os.path.exists(devpath):
            # extract ctrl nr and disk nr from the link destination
            destpath = os.readlink(devpath)
            physid = destpath.split('/')[-1]
            ctrl_nr, _, disk_nr, _ = physid.split(':')
            ctrl_nr = int(ctrl_nr)
            disk_nr = int(disk_nr)
            # try to get the serial nr by `hdparm -I`
            try:
                _, serial = check_output("hdparm -I /dev/%s | grep -i 'serial number'" % entry, shell=True).strip().split(':')
                serial = serial.lstrip()
            except Exception as err:
                logging.error("Cannot read serial number of device '%s' via `hdparm -I`", entry, err)
                serial = '[serial unknown]'
            ctrl_and_disk_info[ (ctrl_nr, disk_nr) ]['device'] = entry
            ctrl_and_disk_info[ (ctrl_nr, disk_nr) ]['serial'] = serial

## pretty-print

for slot, hw in slot_to_ctl_and_diskno[model].items():
    if have_emulated_disks:
        hw = (hw[0]+2, hw[1])
    try:
        print "%2d: %-10s %s" % (slot, ctrl_and_disk_info[hw]['device'], ctrl_and_disk_info[hw]['serial'])
    except KeyError:
        print "%2d: UNKNOWN" % (slot,)
