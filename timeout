#! /bin/bash
#
PROG="$(basename $0)"

## defaults

kill_after=1


## usage and help text

usage () {
cat <<EOF
Usage: $PROG [options] TIMEOUT COMMAND [ARG ...]

Run COMMAND, and kill it if it does not exit within
TIMEOUT seconds.


Options:

  --kill-after, -k NUM
              Send a SIGKILL signal to the process 
              running COMMAND after additional NUM
              seconds have passed since the expiration
              of the timeout.

  --help, -h  Print this help text.

EOF
}


## helper functions
die () {
  rc="$1"
  shift
  (echo -n "$PROG: ERROR: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
  exit $rc
}

warn () {
  (echo -n "$PROG: WARNING: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
}

have_command () {
  type "$1" >/dev/null 2>/dev/null
}

require_command () {
  if ! have_command "$1"; then
    die 1 "Could not find required command '$1' in system PATH. Aborting."
  fi
}

is_absolute_path () {
    expr match "$1" '/' >/dev/null 2>/dev/null
}


## parse command-line 

short_opts='hk'
long_opts='help,kill-after:'

if [ "x$(getopt -T)" != 'x--' ]; then
    # GNU getopt
    args=$(getopt --name "$PROG" --shell sh -l "$long_opts" -o "$short_opts" -- "$@")
    if [ $? -ne 0 ]; then
        die 1 "Type '$PROG --help' to get usage information."
    fi
    # use 'eval' to remove getopt quoting
    eval set -- $args
else
    # old-style getopt, use compatibility syntax
    args=$(getopt "$short_opts" "$@") 
    if [ $? -ne 0 ]; then
        die 1 "Type '$PROG --help' to get usage information."
    fi
    set -- $args
fi

while [ $# -gt 0 ]; do
    case "$1" in
        --kill-after|-k) kill_after="$2"; shift ;;
        --help|-h)       usage; exit 0 ;;
        --) shift; break ;;
    esac
    shift
done

# timeout duration is 1st positional arg
DURATION="$1"
if [ -z "$DURATION" ]; then
    die 1 "No duration specified."
fi
shift


## `timeout` reimplementation in shell
timeout_fn () {
    duration="$1"; shift
    # see: http://unix.stackexchange.com/questions/10698/timing-out-in-a-shell-script
    # ( { "$@" 1>&3; kill $$; } \
    #     | { sleep $duration; echo "Timeout exceeded." 1>&4; kill $$; } \
    #     | { sleep $(expr $duration + $kill_after); kill -KILL $$; }; 
    # ) 3>&1 4>&2
    { sleep $duration; echo "Timeout exceeded." 1>&3; kill $$; } 3>&2 2>/dev/null &
    { sleep $(expr $duration + $kill_after); kill -KILL $$; }    3>&2 2>/dev/null & 
    exec "$@"
}

## main

# use GNU coreutils 'timeout' if available
timeout_cmd=$(type -P timeout)
if [ -z "$timeout_cmd" ] || [ "$timeout_cmd" == "$0" ]; then
    timeout_cmd=timeout_fn
fi

$timeout_cmd $options $DURATION "$@"